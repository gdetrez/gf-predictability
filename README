GF Predictability
=================

This code is used to run language predictability experiment using GF's
smart paradigms.

Configuration
-------------

Warning: the lexicon being usually rather large, the experiments might take
quite a lot of time.

*Dependencies*: There is a few haskell library needed to run this:
- ansi-terminal
- hslogger
- missingh
- transformers

Those  can be installed using cabal with the following command:
> cabal install ansi-terminal hslogger missingh transformers

Some of the experiment also use python or xsltproc to prepare the
lexicon and all use gnu make.

Running the experiments
-----------------------

The experiments are run by invoking the make command in the language
folder:
> cd French
> make

This should run all the necessary scripts (it can take a while.) At
the end of each experiment, a summary will be printed in the
terminal. In addition, the summary is also logged in the file
eixiiperiment_name.summary (example: nouns.summary)

Adapting adding a new language
------------------------------

Creating the lexicon
....................

To adapt the experiment to a new language, one need first to find an
inflected lexicon for that language. Then, for each desired experiment
(nouns, adjectives, verbsâ€¦) a smaller lexicon should be created, in
the csv format, where the fist column is an identifier for the lexicon
entry (can be a dictionary form, a machine identifier or GF oper name)
and the rest is the full inflection table considered in the
experiment.

Example, the english verbs lexicon looks like:

hoover_V,hoover,hoovers,hoovered,hoovering,hoovered
latinize_V,latinize,latinizes,latinized,latinizing,latinized
roneo_V,roneo,roneos,roneoed,roneoing,roneoed
xerox_V,xerox,xeroxes,xeroxed,xeroxing,xeroxed
abandon_V,abandon,abandons,abandoned,abandoning,abandoned
abase_V,abase,abases,abased,abasing,abased
abash_V,abash,abashes,abashed,abashing,abashed

Defining the experiment
.......................

Experiment are defined in an haskell script. We provide a
mkExperimentWithFunction helper to do so. Here is an example from the
English verbs experiment:

>  let verbEx = mkExperimentWithFunctions 
>               "English verbs" 
>               "alltenses/ParadigmsEng.gfo"
>               "mkV"
>               setup
>               test
  
The first argument is only a human readable name for the experiment ;
then comes the path to the gfo file where the paradigm is and the name
of the smart paradigm function. The two last argument require a bit
more informations.

The 'setup' function takes the inflection table as a list of string
and should return a list of possible arguments for the smart paradigm,
in increasing length order..
For example, again from English verbs:
> setupVerb ["blow", "blows", "blown", "blowing", "blew"]
will return
[ ["\"blow\""],
  ["\"blow\"","\"blew\""],
  ["\"blow\"","\"blew\"","\"blown\""],
  ["\"blow\"","\"blows\"","\"blew\"","\"blown\"","\"blowing\""]
]

Note the quotes inside the string, which are needed by the gf
shell. For that, we provide the function esc in
GF.Predictability.Utils.

If the lexicon entry is not valid for whatever reason, the 'skip'
function can be used.

Finally, the test function is given two lists of strings: the first
one is the output of the gf command (the output of the cc -all command
with the given oper name and and arguments) and the second one is the
inflexion table according to the lexicon. It should return a list of
string tuples that will be compared two by two. This is usefull if
pruning or reordering one of the lists is needed.

Running the script and creating the Makefile
............................................

The scripts are usually run using runghc and have a few option useful
for debugging:
--lexicon=FILE    Read lexicon from FILE. If not given, read from stdin
--summary=FILE    Write summary to FILE. If not given, generate a filename
                  from the experiment name.
--results=FILE    Write results to FILE. If not given, generate a filename
                  from the experiment name.
--debug           Print lots of informations in the terminal
--diff            Print a simple 'diff' between the output from gf and the 
                  lexicon for each try.

The file common.mk can be used imported to easilly create an
experiment Makefile.

Finally, the easiest way to start with a new language is probably to
copy an existing one.


